FROM ubuntu:20.04


# Set the DEBIAN_FRONTEND environment variable to noninteractive
# Avoid prompts when installing packages
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && apt upgrade \
&& apt-get update && apt-get -y upgrade \
&& apt-get install -y wget pip nano git python3 python-is-python3 \
&& apt-get install -y build-essential \
&& apt-get install -y libjpeg62 \
&& apt-get install -y libpng16-16 \
&& apt-get install -y gdal-bin \
&& apt-get install -y libgdal-dev

RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \
&& dpkg -i packages-microsoft-prod.deb \
&& rm packages-microsoft-prod.deb \
&& apt-get update 

RUN apt-get update \
&& apt-get install -y apt-transport-https \
&& apt-get update \
&& apt-get install -y dotnet-sdk-6.0

# Force use of earlier dotnet version to build Landis core/extentions
RUN apt-get install -y dotnet-sdk-2.1 \
&& dotnet new globaljson --sdk-version 2.1.818 --force

# Install R
RUN apt-get install -y r-base r-base-dev
# Add CRAN repo, apt key, and backports repository
# Update apt indices and install two helper packages we need
RUN apt update -qq 
RUN apt install -y --no-install-recommends software-properties-common dirmngr
# Add the secure apt key
RUN wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \
# Verify the key:
&& gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \
# The fingerprint should be E298A3A825C0D65DFD57CBB651716619E084DAB9
# Add CRAN to repository list
&& echo "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/" | tee -a /etc/apt/sources.list \
&& apt-get update
# Activate the backports repositories:
RUN echo "deb http://ubuntu.osuosl.org/ubuntu/ $(lsb_release -cs)-backports main restricted universe" | tee -a /etc/apt/sources.list \
&& apt-get update
# Get all the CRAN packages, add the current R4.0 repository
RUN add-apt-repository -y ppa:c2d4u.team/c2d4u4.0+ \
&& apt-get update
# Specify desired version and install R
# Now we can install R using the linux app manager
RUN apt-get install -y r-base-core=4.4.1\* \
&& apt-get install -y r-base-dev=4.4.1\* \
&& apt-get install -y r-recommended=4.4.1\* \
&& apt-get install -y r-base=4.4.1\* 

# Install R packages
# First, install system dependencies:
RUN apt-get install -y libudunits2-dev libgeos-dev libproj-dev libfontconfig1-dev gfortran imagemagick libmagick++-dev
RUN apt install -y libssl-dev libcurl4-openssl-dev unixodbc-dev libxml2-dev libmariadb-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
# To install R packages from within R (this might be troublesome):
RUN R -e "install.packages('tidyr',repo='https://cloud.r-project.org')" 
RUN R -e "install.packages('ggplot2',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('codetools',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('colorspace',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('landscapemetrics',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('zoo',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('gridExtra',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('sf',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('raster',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('terra',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('magick',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('readr',repo='https://cloud.r-project.org')"
RUN R -e "install.packages('tidyterra',repo='https://cloud.r-project.org')"
RUN R -e 'install.packages("xml2", dependencies = T, INSTALL_opts = c("--no-lock"))' 
RUN R -e 'install.packages("tidyverse")'


RUN mkdir /bin/LANDIS_Linux \ 
&& cd /bin/LANDIS_Linux \ 
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Core-Model-v7-LINUX.git \
&& mv Linux-LANDIS-II-Core-Model-v7-LINUX Core-Model-v7-LINUX \
&& cd Core-Model-v7-LINUX/Tool-Console/src \
&& dotnet build -c Release \
&& cd /bin/LANDIS_Linux/Core-Model-v7-LINUX \
&& git clone https://github.com/LANDIS-II-Foundation/Support-Library-Dlls-v7.git \
&& cd Support-Library-Dlls-v7 \
&& git reset --hard 11fc8cbdb5faf600cde2e746c3c1c100347f375c \
&& cd /bin/LANDIS_Linux/Core-Model-v7-LINUX \
&& cp -a ./Support-Library-Dlls-v7/. ./build/extensions

RUN ldd /bin/LANDIS_Linux/.nuget/packages/gdal.core/1.0.0/runtimes/linux-x64/native/gdal_wrap.so

RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX \ 
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Extension-NECN-Succession-v6.8.git \
# Clone other extensions
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Extension-SCRPPLE-v3.2.2.git \
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Extension-Biomass-Harvest-v4.4.git \
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Extension-Output-Biomass.git \
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Extension-Output-Biomass-Community.git \
&& git clone https://github.com/tucker-furniss/Linux-LANDIS-II-Extension-Output-Cohort-Statistics.git \
#git clone https://github.com/LANDIS-II-Foundation/Extension-Base-Harvest.git
#git clone https://github.com/Klemet/LANDIS-II-Magic-Harvest.git
&& git clone -b master https://github.com/tgestabrook/LANDIS-II-Magic-Harvest-linux

# Install NECN 6.8 or 7 (Uncomment preferred version)
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-NECN-Succession-v6.8/src \
# && cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-Extension-NECN-Succession/src \
&& dotnet build -c Release
# Install SCRPPLE
# Remove old version of Ether.WeightedSelector.dll
RUN rm -r /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/extensions/Ether.WeightedSelector.dll \
&& ls /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/extensions \
# Install new version of Ether.WeightedSelector.dll
&& cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-SCRPPLE-v3.2.2/Ether.WeightedSelector-branch/Ether.WeightedSelector \
&&  dotnet build -c Release
# Confirm successful build of Ether.WeightedSelector
# ls /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/extensions
# Install SCRAPPLE v3.2.2
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-SCRPPLE-v3.2.2/src \
&& dotnet build -c Release
# Install other extensions
# Biomass Harvest
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Biomass-Harvest-v4.4/src \
&& dotnet build -c Release
# Install Biomass
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Output-Biomass/src \
&& dotnet build -c Release
# Install IC
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Output-Biomass-Community/src \
&& dotnet build -c Release
# Install Cohort Statistics
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Output-Cohort-Statistics/src \
&& dotnet build -c Release
# Install Magic Harvest
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/LANDIS-II-Magic-Harvest-linux \
&& dotnet build -c Release
# Add LANDIS-II-v7 Extension information to extensions.xml
# Add NECN 6.8 or 7 (Uncomment preferred version)
RUN dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-NECN-Succession-v6.8/deploy/installer/"NECN_Succession 6.txt" \
# dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-Extension-NECN-Succession/deploy/installer/"NECN_Succession 7.txt" \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-SCRPPLE-v3.2.2/deploy/installer/"Scrapple 3.txt" \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Biomass-Harvest-v4.4/deploy/installer/"Biomass Harvest 4.4.txt" \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Output-Biomass/deploy/installer/"Output Biomass 3.0.txt" \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Output-Biomass-Community/deploy/installer/"Output Biomass Community 2.0.txt" \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-Output-Cohort-Statistics/deploy/installer/"Output Cohort Statistics 3.0.txt" \
#dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/Extension-Base-Harvest/deploy/installer/"Base Harvest 5.0.txt" \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Extensions.dll add /bin/LANDIS_Linux/Core-Model-v7-LINUX/LANDIS-II-Magic-Harvest-linux/Deploy/"Installation Files"/plug-ins-installer-files/"Magic harvest v1.3.txt" \
# Force use of later dotnet version
RUN dotnet new globaljson --sdk-version 6.0.420 --force

#### Test NECN
RUN cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-LANDIS-II-Extension-NECN-Succession-v6.8/testing/Core7-NECN6.8 \
# && cd /bin/LANDIS_Linux/Core-Model-v7-LINUX/Linux-Extension-NECN-Succession/src \
&& dotnet /bin/LANDIS_Linux/Core-Model-v7-LINUX/build/Release/Landis.Console.dll scenario_LTB_landscape.txt





